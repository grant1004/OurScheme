Welcome to OurScheme!

> a defined

> "=============== Problem 3 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> Fif defined

> Flambda defined

> call function : Flambda
exp : EMPTY ( EMPTY ( Flambda -10 ) EMPTY ( EMPTY ( Flambda 10 ) x3 ) ) 
call function : Fif
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif EMPTY ( Fcond EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
FF : Fcond
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif EMPTY ( Fcond EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif EMPTY ( cond EMPTY ( EMPTY ( > EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY ( EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif EMPTY ( cond EMPTY ( EMPTY ( > EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY ( EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ nil ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY ( EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ nil ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY ( EMPTY ( < EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ #t ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ #t ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( * EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ 600 ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 )  [ 600 ] ( *  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ 600 ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 )  [ 600 ] ( *  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ 600 ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 )  [ 600 ] ( *  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( if  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( Fif  [ 600 ] ( cond EMPTY (  [ nil ] ( >  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( < EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 22 ) EMPTY ( + EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 33 ) ) ) EMPTY (  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 )  [ 600 ] ( *  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( if  [ #t ] ( <  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) -10 ) EMPTY ( * EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) -10 2 ) EMPTY ( * EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 3 ) ) ) EMPTY ( else EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( if EMPTY ( = EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 20 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) -10 30 ) ) ) ) 4 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( if EMPTY ( >= x2 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) EMPTY ( begin EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( if EMPTY ( >= x2 EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) ) EMPTY ( begin EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( if  [ #t ] ( >= x2  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) ) EMPTY ( begin EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( if  [ #t ] ( >= x2  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) ) EMPTY ( begin EMPTY ( + 1200 EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
call function : Flambda
exp : EMPTY ( begin EMPTY ( * EMPTY ( if  [ #t ] ( >= x2  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) )  [ 1140 ] ( begin  [ 1140 ] ( + 1200  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) ) EMPTY ( if  [ nil ] ( and  [ #t ] ( > 1200 50 )  [ nil ] ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
call function : Fcond
exp : EMPTY ( begin EMPTY ( * EMPTY ( if  [ #t ] ( >= x2  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) )  [ 1140 ] ( begin  [ 1140 ] ( + 1200  [ -60 ] ( begin  [ -60 ] ( *  [ -20 ] ( cond EMPTY (  [ nil ] ( > 5 5 ) EMPTY ( + 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( + 5 5 22 ) EMPTY ( + 5 5 33 ) ) ) EMPTY (  [ nil ] ( < 5 5 ) EMPTY ( * 5 5 ) EMPTY ( if EMPTY ( < 5 5 ) EMPTY ( * 5 5 2 ) EMPTY ( * 5 5 3 ) ) ) EMPTY ( else  [ 0 ] ( - 5 5 )  [ -20 ] ( if  [ #t ] ( = 5 5 )  [ -20 ] ( - 5 5 20 ) EMPTY ( - 5 5 30 ) ) ) ) 3 ) ) ) EMPTY ( if  [ nil ] ( and  [ #t ] ( > 1200 50 )  [ nil ] ( > 4 50 ) ) EMPTY ( + 1200 EMPTY ( EMPTY ( Flambda 10 ) 5 ) 33 ) EMPTY ( + 1200 EMPTY ( begin EMPTY ( * EMPTY ( Fcond 5 5 ) 3 ) ) 44 ) ) ) EMPTY ( begin EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 ) EMPTY ( if EMPTY ( and EMPTY ( > 1200 50 ) EMPTY ( > 4 50 ) ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 33 ) EMPTY ( - EMPTY ( EMPTY ( Flambda 10 ) 5 ) 4 44 ) ) ) ) 2 ) ) 
2368

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!