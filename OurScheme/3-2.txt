當測試「Test data 2 of 3」時，Input為>>2
(define a "=============== Problem 1 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - basic - incl.: COND IF BEGIN AND OR

(clean-environment) ; first round ; no error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) (cond ((> x4 x1) (+ x4 x1)) ((< x4 x1)(* x4 x1))(else (- x4 x1))))
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(define (Fif x1 x4 x3) (if (>= x2 x3) (+ x1 x3) (- x3 x4)))
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(define (Fbegin x3) (begin (+ x1 x3) (- x2 x3)))
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(define (Fand x4 x2 x5) (and (> x4 x2) (> x2 x5) (> x5 0)))
(Fand x3 x2 x1)
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand 7 1 -7)
(define (For x1 x4 x3) (or (> x1 x4) (> x4 x3) (> x1 100) (> x4 100) (> x3 100)))
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
(define x4 (lambda (x1) (* x1 2)))
x4
(x4 x3)
x1
x2

(clean-environment)

(define (cadr x) (car (cdr x))
  )
cadr
(cadr '( (10 20) (30 40) (50 60) 70 . 80 ))
(define cadr-clone cadr)
cadr-clone
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone car)
(cadr-clone '( (10 20) (30 (40)) (50 60) 70 . 80 ))
(define cadr-clone cadr)
(define (cdar y) (cdr (car y))
  )
(cdar '((1 2) (3 4) 5 6 7 . 8)
  )
(define first car)
car
first
(first '(10 20 30))
(define FFirst 'car)
FFirst
(define second cadr)
(second '(10 20 30))
(second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
  )
(first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
         )
  )
(second (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
                 )
          )
  )
(cdr (first (second '( (10 (20) 30) ((40 50) 60) (70 (80 (90))) )
              )
       )
  )
(define a "=============== Problem 2 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)

(clean-environment) ; first round, no error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) 
        (cond ( (> x4 x1) 
                (+ x4 x1)
                ( if (< x4 x1)
                     (+ x4 x1 22)
                     (+ x4 x1 33)
                )
              ) 
              ( (< x4 x1) 
                (* x4 x1)
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
              )
              ( else 
                (- x4 x1)
                (if (= x4 x1)
                    (- x4 x1 20)
                    (- x4 x1 30)
                )
              );else
        );cond
);define
(Fcond x1 x2)
(Fcond x2 x3)
(Fcond x1 x1)
(define (Fif x1 x4 x3) 
        (if (>= x2 x3) 
            ( begin 
              (+ x1 x3) 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   (+ x1 x3 44)
              );if
            );begin
            ( begin 
              (- x3 x4)
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   (- x3 x4 44)
              );if
            );begin
        );if
);define
(Fif 30 40 50)
(Fif x1 x2 x3)
(Fif x3 x2 x1)
(Fif x2 x2 80)
(define (Fbegin x3) 
        ( begin 
          ( begin (+ x1 x3) )
          ( begin (- x2 x3) )
          ( cond ( (> x3 x1) (+ x3 x1) ) 
                 ( (< x3 x1) (* x3 x1) )
                 ( else      (- x3 x1) )
          );cond
        );begin
);define
(Fbegin x1)
(Fbegin 80)
(Fbegin x2)
(define (Fand x4 x2 x5) 
        (and ( if ( > x1 0 )
                  ( < x1 40 )
                  ( > (- x1 x5) 27)
             )
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(Fand x3 x2 (+ x3 x2))
(Fand x3 10 x1)
(Fand 7 6 x2)
(Fand (+ 7 x3) 1 (- -7 x2))
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define
(For 10 20 30)
(For 1000 20 30)
(For 30 40 20)
(For x1 x2 x3)
(For x2 x2 x2)
(For x2 x1 20)
( define ( Flambda x1 )
         ( if ( > x1 0 )
              ( lambda ( x2 ) ( * x2 2 )
              );lambda
              ( lambda ( x3 ) ( * x3 3 )
              );lambda
         );if
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x1 )
( ( Flambda -10 ) x1 )

(clean-environment)

( let ( (x 3) (y '(1 2 3))
        )
        (cons 1 '(4 5))       ; this will be evaluated ; but no use
        (cons x (cdr y))      ; the value of this one is the value of LET
  )
(let ((x 3)
       ) 
       5     
  )
(let () 5           
  )
(clean-environment)
(define a 5)
(let ( (x 6) (y '(1 2 3))
       )
       (+ a x (car (cdr y))
       )
  )
a
(let ( (x 6) (y '(1 2 3))
         (a 7)               ; local variable "shadows" global variable
       )
       (+ a x (car (cdr (cdr y)))
       )
  )
a
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (- a x (car (cdr (cdr y)))
       )
  )
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (let ( (a 17) (x 11) 
            )
            (- a x (car (cdr (cdr y)))
            )
       )
  )
(let ( (x 6) (y '(1 2 3))
         (a 7)
       )
       (+ a x (car (cdr (cdr y)))
       )
       (let ( (a 17) (x 11) 
            )
            (- a x (car (cdr (cdr y)))
               (let ( (x 21) )
                    (+ a x 5)
                    (- 0 a x)
               )
            )
       )
  )

(define a "=============== Problem 3 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)
 ; + functional composition // functions 呼叫 functions
 
(clean-environment) ; first round, no error.

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) 
        (cond ( (> x4 x1) 
                (+ x4 x1)
                ( if (< x4 x1)
                     (+ x4 x1 22)
                     (+ x4 x1 33)
                )
              ) 
              ( (< x4 x1) 
                (* x4 x1)
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
              )
              ( else 
                (- x4 x1)
                (if (= x4 x1)
                    (- x4 x1 20)
                    (- x4 x1 30)
                )
              );else
        );cond
);define
(define (Fif x1 x4 x3) 
        (if (>= x2 x3) 
            ( begin 
              (+ x1 x3) 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   (+ x1 x3 44)
              );if
            );begin
            ( begin 
              (- x3 x4)
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   (- x3 x4 44)
              );if
            );begin
        );if
);define
(define (Fbegin x3) 
        ( begin 
          ( begin (+ x1 x3) )
          ( begin (- x2 x3) )
          ( cond ( (> x3 x1) (+ x3 x1) ) 
                 ( (< x3 x1) (* x3 x1) )
                 ( else      (- x3 x1) )
          );cond
        );begin
);define
(define (Fand x4 x2 x5) 
        (and ( if ( > x1 0 )
                  ( < x1 40 )
                  ( > (- x1 x5) 27)
             )
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define

; (Fcond x1 x2)
; (Fcond x2 x3)
; (Fcond x1 x1)
; (Fif 30 40 50)
; (Fif x1 x2 x3)
; (Fif x3 x2 x1)
; (Fif x2 x2 80)
; (Fbegin x1)
; (Fbegin 80)
; (Fbegin x2)
; (Fand x3 x2 x1)(Fand x3 10 x1)(Fand 7 6 x2)(Fand 7 1 -7)
; (For 10 20 30)(For 1000 20 30)(For 30 40 20)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)

(Fcond (Fif x1 x2 x3) (Fcond (Fbegin 80) x2))
(Fcond (Fcond (Fbegin x1) x2) (Fif x1 x2 x3))
(Fif (Fbegin x2) (Fcond (Fif x1 x2 x3) (Fcond x2 x3)) (Fif (+ x1 x2) x2 x3))
(define (For x1 x4 x3) 
        (or (and 
              (> (Fif x1 x2 x3) 50)
              (> (Fif x2 x2 80) 170)
            )
            (> (Fif x1 x2 x3) (Fif x2 x2 80)) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define
(For 10 20 30)(For 1000 20 30)(For 30 40 20)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)
( define ( Flambda x1 )
         ( if ( > x1 0 )
              ( lambda ( x2 ) ( * ( Fcond x2 x3 
                                  );Fcond
                                  3 
                              );*
              );lambda
              ( lambda ( x3 ) ( * ( Fif ( Fcond x3 x1 
                                        );Fcond 
                                        x2 
                                        x3 
                                  );Fif
                                  2 
                              );*
              );lambda
         );if
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x3 )
( ( Flambda -10 ) x3 )
( ( Flambda 10 ) ( ( Flambda -10 ) x3) )
( ( Flambda -10 ) ( ( Flambda 10 ) x3 ) )

(clean-environment)

( lambda (x) y z       ; the evaluation of a lambda expression
                         ; produces an internal representation of a 
  )                      ; function
( lambda () y )
( lambda () 5 )
( lambda () () )      ; a parameter-less function that returns 'nil'
( lambda () (+ c 5)    ; defines a function without calling it
  )
( ( lambda () (+ 5 5) (+ 5 6) 
    )
  )
( define a 2 )
( define f ( lambda (x) (+ x x c) ; the binding of 'f' is defined
             )                      ; to be the internal representation
  )                                 ; of a function
f
( define c 10 )
(f a)
( f ( ( lambda (x y)
          (+ x y)
        )
        ( f a )
        8
      )
  )
(define x 20)
(define y 30)
(define g ( lambda (x)
              (* x (+ 5 x)
              )
            )
  )
(g (+ (g (f a)
        )
        c
     )
  )
( f ( ( lambda (x y)
          (+ x y)
        )
        ( f x )
        (* (- y x)
           (g c)
        )
      )
  )
(define F 5)
(define G 10)
(+ F G)
(define F (lambda (x) (+ x x x)))
(+ (F 10) G)
(define F (car (cons car cdr)))
(+ (F (cons G G)) G)
(define H (lambda (x)
              (cond ( (= x 1) car )
                    ( (= x 2) cons )
                    ( (= x 3) cdr )
                    ( (= x 4) F )
                    ( (= x x) 100 ) ) ) )
( (H 2) 3 5 )
( (H 4) '(10 20 30))
(define F cdr)
( (H 4) '(10 20 30))
(+ ((H 1) '(10 20 30)) (H 2015))
(define (cadr x) (car (cdr x)))
(define global '(10 20 30))
(define (Try F) (F global))
(Try cadr)
(Try car)
(Try cdr)
(exit)<<

正確的輸出應該是>>Welcome to OurScheme!

> a defined

> "=============== Problem 1 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 12

> 20

> 0

> Fif defined

> 10

> 1

> 8

> 76

> Fbegin defined

> 1

> -76

> 0

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> x4 defined

> #<procedure lambda>

> 10

> 3

> 4

> environment cleaned

> cadr defined

> #<procedure cadr>

> ( 30
  40
)

> cadr-clone defined

> #<procedure cadr>

> ( 30
  ( 40
  )
)

> cadr-clone defined

> ( 10
  20
)

> cadr-clone defined

> cdar defined

> ( 2
)

> first defined

> #<procedure car>

> #<procedure car>

> 10

> FFirst defined

> car

> second defined

> 20

> ( ( 40
    50
  )
  60
)

> ( 40
  50
)

> 50

> ( 50
)

> a defined

> "=============== Problem 2 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 24

> 40

> -20

> Fif defined

> -34

> -43

> 52

> 32

> Fbegin defined

> 0

> 83

> 7

> Fand defined

> nil

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> #<procedure lambda>

> 6

> 9

> environment cleaned

> ( 3
  2
  3
)

> 5

> 5

> environment cleaned

> a defined

> 13

> 5

> 16

> 5

> -2

> 3

> 41

> a defined

> "=============== Problem 3 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> Fif defined

> Fbegin defined

> Fand defined

> For defined

> -10320

> -10

> 8

> For defined

> nil

> #t

> #t

> nil

> #t

> nil

> Flambda defined

> #<procedure Flambda>

> #<procedure lambda>

> #<procedure lambda>

> -60

> -86

> -2580

> -752

> environment cleaned

> #<procedure lambda>

> #<procedure lambda>

> #<procedure lambda>

> #<procedure lambda>

> #<procedure lambda>

> 11

> a defined

> f defined

> #<procedure lambda>

> c defined

> 14

> 54

> x defined

> y defined

> g defined

> 77556

> 3110

> F defined

> G defined

> 15

> F defined

> 40

> F defined

> 20

> H defined

> ( 3
  .
  5
)

> 10

> F defined

> ( 20
  30
)

> 110

> cadr defined

> global defined

> Try defined

> 20

> 10

> ( 20
  30
)

> 
Thanks for using OurScheme!<<

你的程式的輸出是>>
(There was a run-time error :
Welcome to OurScheme!

> a defined

> "=============== Problem 1 viewable case ================="

> environment cleaned

> x1 defined

> x2 defined

> x3 defined

> Fcond defined

> 12

> 20

> 0

> Fif defined

> 10

> 1

> 8

> 76

> Fbegin defined

> 1

> -76

> 0

> Fand defined

> #t

> nil

> #t

> nil

> For defined

> nil

> #t

> #t

> nil

> nil

> #t

> x4 defined

> #<procedure lambda>

> 10

> 3

> 4

> environment cleaned

> cadr defined

> #<procedure cadr>

> ( 30
  40
)

> cadr-clone defined

> #<procedure cadr>

> ( 30
  ( 40
  )
)

> cadr-clone defined

>

A SAFECode fault has occurred. Line number unknown..)<<
